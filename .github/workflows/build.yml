name: build

on:
  workflow_dispatch:
    inputs:
      push_image:
        description: 'Whether to push the image to the registry'
        required: true
        default: 'false'
      include_latest_tag:
        description: 'Whether to also tag the image as "latest"'
        required: true
        default: 'false'

jobs:
  build:
    name: build
    runs-on: 'ubuntu-latest'
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version from Dockerfile
        id: version
        run: |
          VERSION=$(sed -n 's/^ENV RC_VERSION=\(.*\)/\1/p' ./7.7/Dockerfile | xargs)
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Get short node version
        uses: actions/github-script@v7
        id: short-version
        with:
          result-encoding: string
          script: |
            const version = "${{ steps.version.outputs.VERSION }}".split('.');
            return `${version[0]}.${version[1]}`

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Load secrets
        uses: 1password/load-secrets-action@v2
        with:
          # Export loaded secrets as environment variables
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          DOCKERHUB_USERNAME: "op://aws-svcs/iga3xtu2bg4b7ofi24qkaohaye/username"
          DOCKERHUB_TOKEN: "op://aws-svcs/iga3xtu2bg4b7ofi24qkaohaye/credential"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build and optionally push image
        if: github.event_name == 'workflow_dispatch'
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event.inputs.push_image == 'true' }}
          context: .
          file: ./${{ steps.short-version.outputs.result }}/Dockerfile
          platforms: linux/arm64,linux/amd64
          tags: >-
            andywebservices/rocket.chat:${{ steps.version.outputs.VERSION }}${{
              github.event.inputs.include_latest_tag == 'true' && '
            ' }}${{
              github.event.inputs.include_latest_tag == 'true' && 'andywebservices/rocket.chat' }}:latest

      - name: Show logs if failed
        if: failure()
        run: docker compose logs
